// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"

	apierror "github.com/F-Amaral/apiagenda/internal/api/apierror"

	entities "github.com/F-Amaral/apiagenda/pkg/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// ContactRepository is an autogenerated mock type for the ContactRepository type
type ContactRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, contact
func (_m *ContactRepository) Add(ctx context.Context, contact *entities.Contact) apierror.ApiError {
	ret := _m.Called(ctx, contact)

	var r0 apierror.ApiError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Contact) apierror.ApiError); ok {
		r0 = rf(ctx, contact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apierror.ApiError)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *ContactRepository) GetAll(ctx context.Context) ([]*entities.Contact, apierror.ApiError) {
	ret := _m.Called(ctx)

	var r0 []*entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Contact); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Contact)
		}
	}

	var r1 apierror.ApiError
	if rf, ok := ret.Get(1).(func(context.Context) apierror.ApiError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apierror.ApiError)
		}
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *ContactRepository) GetById(ctx context.Context, id string) (*entities.Contact, apierror.ApiError) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Contact); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Contact)
		}
	}

	var r1 apierror.ApiError
	if rf, ok := ret.Get(1).(func(context.Context, string) apierror.ApiError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apierror.ApiError)
		}
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *ContactRepository) GetByName(ctx context.Context, name string) (*entities.Contact, apierror.ApiError) {
	ret := _m.Called(ctx, name)

	var r0 *entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Contact); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Contact)
		}
	}

	var r1 apierror.ApiError
	if rf, ok := ret.Get(1).(func(context.Context, string) apierror.ApiError); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apierror.ApiError)
		}
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, id
func (_m *ContactRepository) Remove(ctx context.Context, id string) apierror.ApiError {
	ret := _m.Called(ctx, id)

	var r0 apierror.ApiError
	if rf, ok := ret.Get(0).(func(context.Context, string) apierror.ApiError); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apierror.ApiError)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, contact
func (_m *ContactRepository) Update(ctx context.Context, contact *entities.Contact) apierror.ApiError {
	ret := _m.Called(ctx, contact)

	var r0 apierror.ApiError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Contact) apierror.ApiError); ok {
		r0 = rf(ctx, contact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apierror.ApiError)
		}
	}

	return r0
}
